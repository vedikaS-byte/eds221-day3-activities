---
title: "toolik_chem"
format: html
---

# Real Data 
```{r}
library(tidyverse)
library(here)
library(janitor)

toolik_biochem <- read.csv(here::here("data", "2011_Kling_Akchem.csv"))

head(toolik_biochem)


toolik_biochem <- toolik_biochem %>% janitor::clean_names()
names(toolik_biochem)

skimr::skim(toolik_biochem)

```


```{r}
# Create a subset of the data that contains only observations from the “Toolik Inlet” site, and that only contains the variables (columns) for pH, dissolved organic carbon (DOC), and total dissolved nitrogen (TDN) (hint: see dplyr::select()). Store this subset as inlet_biochem. Make sure to look at the subset you’ve created.
inlet_biochem <- toolik_biochem %>% filter(site == "Toolik Inlet") %>% dplyr::select(p_h, doc_u_m, tdn_u_m)

inlet_biochem <- inlet_biochem %>% mutate(p_h = as.numeric(p_h), doc_u_m = as.numeric(doc_u_m), tdn_u_m =  as.numeric(tdn_u_m))
dim(inlet_biochem)
#view(inlet_biochem)
head(inlet_biochem)



```


```{r}
# Find the mean value of each column in inlet_biochem 3 different ways:
# 
# Write a for loop from scratch to calculate the mean for each

for(i in colnames(inlet_biochem)){
  print(as.numeric(mean(inlet_biochem$p_h, na.rm = T)))
  print(as.numeric(mean(inlet_biochem$doc_u_m, na.rm = T)))
  print(as.numeric(mean(inlet_biochem$tdn_u_m, na.rm = T)))
  break 
}

## OR
mean_col <- vector(mode = "numeric", length = ncol(inlet_biochem))
for(i in 1:ncol(inlet_biochem)){
  mean_val <- mean(inlet_biochem[[i]], na.rm = T)
  mean_col[[i]] <- mean_val
  print(mean_col[[i]])
}
  
# Use one other method (e.g. apply, across, or purrr::map_df) to find the mean for each column.
# inlet_biochem %>% apply(cols, margin = 2, FUN = mean) 
# apply(as.matrix(inlet_biochem),as.vector(colnames(as.matrix(inlet_biochem))), FUN = mean )
# apply(inlet_biochem$p_h, FUN = mean)
# str(toolik_biochem)
# colname_1 <- dimnames(as.matrix(inlet_biochem))[[2]] 

apply(inlet_biochem, MARGIN = 2, FUN = mean, na.rm = T)
inlet_biochem %>% na.omit() %>% summarise(across(c(p_h, doc_u_m, tdn_u_m), mean))

```
# Additional practice: Constructing for loops and storing results
```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")
age_human <- c(3,8,4,6,12,18)
animal_ages <- vector(mode = "numeric", length = length(species))

#
for(i in seq_along(species)) {
  if(species[i] == "dog"){
  animal_age = age_human[i] * 7
} else if (species[i] == "elephant") {
  animal_age = age_human[i] * 0.88
} else if (species[i] == "goat"){
  animal_age = age_human[i] * 4.7
}
  animal_ages[i] <- animal_age #populate empty vector
  print(animal_ages[i])
}

tigers <- c(29,34,82)
lions <- c(2,18,6)
big_cats <- c() #vector(mode= numeric, length = length(tigers)) # allocate storage for new values

for(i in seq_along(tigers)){
  total_cats <- tigers[i] + lions[i] 
  big_cats[i] <- total_cats
  print(big_cats[i])
}

```


# Additional practice: Going though columns in a dataframe using loops and existing functions
```{r}
# [] or [[]], return different things but refer to same place
mtcars[[2]] # returns
class(mtcars[[2]]) # series of observations 
class(mtcars[]) # dataframe

```



